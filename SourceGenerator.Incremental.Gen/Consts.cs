using Microsoft.CodeAnalysis;
using System.Reflection;

namespace SourceGenerator.Incremental.Gen
{
    public static class Consts
    {
        public static readonly SymbolDisplayFormat GlobalAlias = SymbolDisplayFormat.FullyQualifiedFormat
           //.WithMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.ExpandNullable | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier)
           .WithMemberOptions(SymbolDisplayMemberOptions.IncludeContainingType);

        public static readonly AssemblyName AssemblyName = typeof(UnionGenerator).Assembly.GetName();
        public static readonly string GeneratedCodeAttr = $@"global::System.CodeDom.Compiler.GeneratedCodeAttribute(""{AssemblyName.Name}"", ""{AssemblyName.Version}"")";


        public static readonly string UnionOptionAttrCode = $$"""
                   // <auto-generated/>
                   #nullable enable

                   namespace SourceGenerator
                   {
                       [{{Consts.GeneratedCodeAttr}}]
                       [global::System.AttributeUsage(global::System.AttributeTargets.Struct, AllowMultiple = true)]
                       public sealed class UnionOptionAttribute<TUnionOption> : global::System.Attribute
                       {
                           public string OptionName { get;}
                           public Type OptionType => typeof(TUnionOption);

                           public UnionOptionAttribute(string name)
                           {
                               OptionName = name;
                           }
                       }
                   }
                   """;

        public static readonly string UnionJsonConverterCode = $$"""
                   // <auto-generated/>
                   #nullable enable

                   namespace SourceGenerator
                   {
                       [{{Consts.GeneratedCodeAttr}}]
                       [global::System.AttributeUsage(global::System.AttributeTargets.Class, AllowMultiple = false)]
                       public sealed class UnionJsonConverterAttribute<TUnion> : global::System.Attribute
                       { }
                   }
                   """;

        public static readonly string UnionInterfaceCode = $$"""
                    // <auto-generated/>
                    #nullable enable

                    namespace SourceGenerator
                    {
                        [{{Consts.GeneratedCodeAttr}}]
                        public interface IUnion
                        { }
                    }
                    """;

        public static readonly string TypedUnionInterfaceCode = $$"""
                    // <auto-generated/>
                    #nullable enable

                    namespace SourceGenerator
                    {
                        [{{Consts.GeneratedCodeAttr}}]
                        public interface IUnion<TTypeEnum> 
                            where TTypeEnum: struct, Enum
                        {
                            TTypeEnum Type { get; }
                        }
                    }
                    """;

        public static readonly string UnionJsonConverterBaseCode = $$"""
                    // <auto-generated/>
                    #nullable enable

                    namespace SourceGenerator
                    {
                        [{{Consts.GeneratedCodeAttr}}]
                        abstract class UnionJsonConverterBase<TUnion, TUnionTypeEnum> : global::System.Text.Json.Serialization.JsonConverter<TUnion>
                            where TUnionTypeEnum : struct, global::System.Enum
                            where TUnion : global::SourceGenerator.IUnion<TUnionTypeEnum>
                        {
                            const string TypePropName = "type";
                            const string DataPropName = "data";

                            public override TUnion Read(ref global::System.Text.Json.Utf8JsonReader reader, Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                            {
                                if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
                                {
                                    throw new global::System.Text.Json.JsonException();
                                }

                                var type = ReadDataType(ref reader, options);

                                TUnion value = ReadUnionCore(ref reader, type, options);

                                if (reader.Read() && reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                                {
                                    return value;
                                }

                                throw new global::System.Text.Json.JsonException();
                            }

                            protected abstract TUnion ReadUnionCore(ref global::System.Text.Json.Utf8JsonReader reader, TUnionTypeEnum type, global::System.Text.Json.JsonSerializerOptions options);

                            protected static TUnionTypeEnum ReadDataType(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Text.Json.JsonSerializerOptions options)
                            {
                                reader.Read();
                                AssertPropertyName(ref reader, TypePropName);

                                reader.Read();
                                var enumConverter = (global::System.Text.Json.Serialization.JsonConverter<TUnionTypeEnum>)options.GetConverter(typeof(TUnionTypeEnum));
                                return enumConverter.Read(ref reader, typeof(TUnionTypeEnum), options);
                            }

                            protected static T ReadDataData<T>(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Text.Json.JsonSerializerOptions options)
                            {
                                reader.Read();
                                AssertPropertyName(ref reader, DataPropName);

                                reader.Read();
                                var dataConverter = (global::System.Text.Json.Serialization.JsonConverter<T>)options.GetConverter(typeof(T));
                                return dataConverter.Read(ref reader, typeof(T), options);
                            }

                            static void AssertPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, string expectedPropertyName)
                            {
                                if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                                {
                                    throw new global::System.Text.Json.JsonException($"Expected property \"{TypePropName}\".");
                                }

                                string? typePropertyName = reader.GetString();
                                if (typePropertyName != expectedPropertyName)
                                {
                                    throw new global::System.Text.Json.JsonException($"Expected property \"{TypePropName}\".");
                                }
                            }

                            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, TUnion value, global::System.Text.Json.JsonSerializerOptions options)
                            {
                                writer.WriteStartObject();

                                writer.WritePropertyName(TypePropName);

                                var enumConverter = (global::System.Text.Json.Serialization.JsonConverter<TUnionTypeEnum>)options.GetConverter(typeof(TUnionTypeEnum));
                                enumConverter.Write(writer, value.Type, options);

                                WriteUnionCore(writer, value, options);

                                writer.WriteEndObject();
                            }

                            protected abstract void WriteUnionCore(global::System.Text.Json.Utf8JsonWriter writer, TUnion value, global::System.Text.Json.JsonSerializerOptions options);

                            protected static void WriteData<T>(global::System.Text.Json.Utf8JsonWriter writer, T v, global::System.Text.Json.JsonSerializerOptions options)
                            {
                                writer.WritePropertyName(DataPropName);

                                var dataConverter = (global::System.Text.Json.Serialization.JsonConverter<T>)options.GetConverter(typeof(T));
                                dataConverter.Write(writer, v, options);
                            }
                        }
                    }
                    """;

    }
}

